defpackage csv :
   import core
   import collections

defstruct UnclosedQuote <: Exception
defmethod print (o:OutputStream, e:UnclosedQuote) :
   print(o, "Unclosed opening quotation")

defstruct UnexpectedCharacter <: Exception : (char:Char)
defmethod print (o:OutputStream, e:UnexpectedCharacter) :
   print(o, "Unexpected Character: %~." % [char(e)])

public defstruct CSV :
   filename: String
   header: HashTable<String,Int>|True|False with: (setter => set-header)
   delim: Char

public defn field (csv:CSV, t:Tuple, name:String) :
   t[get(header(csv) as HashTable<String,Int>, name)]

defn crlf (c:Char) -> True|False :
   c == '\n' or c == '\r'

public defn parse (csv:CSV) -> Tuple<Tuple> :
   val file = FileInputStream(filename(csv))
   val records = Vector<Tuple>()
   var cur-char:Char|False = get-char(file)
   var cur-record = Vector<String>()
   var cur-field:String = ""

   while cur-char is Char :
      if cur-char == delim(csv) :
         add(cur-record, cur-field)
         cur-field = ""
         cur-char = get-char(file)
      else if crlf(cur-char as Char) :
         add(cur-record, cur-field)
         add(records, to-tuple(cur-record))
         cur-char = get-char(file)
         cur-record = Vector<String>()
      else if cur-char == '"' :
         val [field char] = get-field(csv, file, false)
         cur-field = field
         cur-char  = char
      else :
         val [field char] = get-field(csv, file, cur-char)
         cur-field = field
         cur-char  = char

   if header(csv) is True :
      val hdrs = HashTable<String,Int>()
      for i in 0 to length(records[0]) do :
         hdrs[records[0][i]] = i
      set-header(csv, hdrs)
      remove(records, 0 to 1)

   to-tuple(records)

defn get-field (csv:CSV, file:FileInputStream, unquoted:Char|False) -> [String, Char|False] :
   var field = StringBuffer()
   label<[String, Char|False]> end-of-field :
      var current:Char|False
      var next:Char|False

      if unquoted is Char :
         current = unquoted as Char
      else :
         current = get-char(file)

      if unquoted is False :
         while current is Char :
            if current == '"' :
               next = get-char(file)
               if next == '"' :
                  add(field, current as Char)
               else if next == delim(csv) or crlf(next as Char) or next is False :
                  end-of-field([to-string(field), next])
               else :
                  throw(UnexpectedCharacter(next as Char))
            else if current is False :
               throw(UnclosedQuote())
            else :
               add(field, current as Char)

            current = get-char(file)
         [to-string(field), current]
      else :
         while current is Char :
            if current == delim(csv) or crlf(current as Char) :
               end-of-field([to-string(field), current])
            else if current == '"' :
               throw(UnexpectedCharacter(current as Char))
            else :
               add(field, current as Char)

            current = get-char(file)
         [to-string(field), current]
